//===========================================================================
//
//							        WFMLogCache.cs
//
//	Provides functions for writing to the WFMLogCache table
//  Used by finance manager
//
//  Note that the table might not be held in the main ICW DB and might be in separate DB.
//
//  The table holds cached data from the WOrderlog, and WTranslog after the 
//  WFMRules have been applied to each row log row.
//  Note there maybe rows in WOrderlog, or WTranslog, that are not present in WFMLogCahce (if no rule applies to it).
//  The table should be updated every night using pWFMLogCachePopulate 'T' and pWFMLogCachePopulate 'O'
//
//  Due to the large amount of data being processed the Load methods will not
//  always return all fields listed in WFMLogCacheRow. 
//  See individual load methods for the fields being returned.
//
//  Supports reading.
//  
//	Modification History:
//	09Jul13 XN  Written 27038
//  16Sep13 XN  Added LoadByDatesSitesAccountCodes (for account sheet) 73326 
//  17Sep13 XN  Converted WFMAccountCode.Code, WFMRule.Code from string to short
//  02Dec13 XN  Added VAT account codes 79631
//  17Feb14 XN  Remove VAT accoutn codes (now posted as spearate row) so added AccountCodeType
//  20Aug14 XN  Allowed it to use the a separate DB if needed.
//===========================================================================
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using ascribe.pharmacy.basedatalayer;
using ascribe.pharmacy.shared;

namespace ascribe.pharmacy.financemanagerlayer
{
    /// <summary>Holds discrepancy information generated by CalculateDiscrepancies</summary>
    public class WFMDiscrepancy
    {
        public string NSVCode;
        public double StockValueExVat;
        public double StockValueIncVat;
        public double StockValueVat;
        public double StockLevelInIssueUnits;
    }

    /// <summary>Holds data for a single WFMLogCache row</summary>
    public class WFMLogCacheRow : BaseRow
    {
        public short?    RuleCode               { get { return RawRow.Table.Columns.Contains("RuleCode")                ? FieldToShort(RawRow["RuleCode"])                                             : null;         } }
        public int?      LocationID_Site        { get { return RawRow.Table.Columns.Contains("LocationID_Site" )        ? FieldToInt(RawRow["LocationID_Site"])                                        : null;         } } 
        public string    SupCode                { get { return RawRow.Table.Columns.Contains("SupCode" )                ? FieldToStr(RawRow["SupCode"],          true, string.Empty)                   : string.Empty; } }
        public string    SupplierName           { get { return RawRow.Table.Columns.Contains("SupplierName" )           ? FieldToStr(RawRow["SupplierName"],     true, string.Empty)                   : string.Empty; } }
        public string    WardCode               { get { return RawRow.Table.Columns.Contains("WardCode" )               ? FieldToStr(RawRow["WardCode"],         true, string.Empty)                   : string.Empty; } }
        public string    WardName               { get { return RawRow.Table.Columns.Contains("WardName" )               ? FieldToStr(RawRow["WardName"],         true, string.Empty)                   : string.Empty; } }
        public string    OrderNumber            { get { return RawRow.Table.Columns.Contains("OrderNum")                ? FieldToStr(RawRow["OrderNum"],         true, string.Empty)                   : string.Empty; } }
        public string    NSVCode                { get { return RawRow.Table.Columns.Contains("NSVCode" )                ? FieldToStr(RawRow["NSVCode"],          true, string.Empty)                   : string.Empty; } }
        public string    DrugDescription        { get { return RawRow.Table.Columns.Contains("DrugDescription" )        ? FieldToStr(RawRow["DrugDescription"],  true, string.Empty).Replace("!", " ") : string.Empty; } }
        public DateTime? LogDateTime            { get { return RawRow.Table.Columns.Contains("LogDateTime")             ? FieldToDateTime(RawRow["LogDateTime"])                                       : null;         } }
        public short?    AccountCode_Debit      { get { return RawRow.Table.Columns.Contains("AccountCode_Debit")       ? FieldToShort(RawRow["AccountCode_Debit"])                                    : null;         } }
        public short?    AccountCode_Credit     { get { return RawRow.Table.Columns.Contains("AccountCode_Credit")      ? FieldToShort(RawRow["AccountCode_Credit"])                                   : null;         } }
        public double?   QuantityInIssueUnits   { get { return FieldToDouble(RawRow["Qty"]);              } }
        public double    CostIncVat             { get { return FieldToDouble(RawRow["CostIncVat"])?? 0.0; } }
        public double    CostExVat              { get { return FieldToDouble(RawRow["CostExVat"]) ?? 0.0; } }
        public double    VatCost                { get { return FieldToDouble(RawRow["VatCost"])   ?? 0.0; } }
        public string    AccountCodeType        { get { return RawRow.Table.Columns.Contains("AccountCodeType")         ? FieldToStr(RawRow["AccountCodeType"])                                        : string.Empty; } }

        /// <summary>Returns the cost ex vat depending on the account code XN 03Dec13 79631</summary>
        public double? GetAccountQuantityInIssueUnits(short accountCode)
        {
            if (this.AccountCode_Credit == accountCode)
                return -this.QuantityInIssueUnits;
            else if (this.AccountCode_Debit == accountCode)
                return this.QuantityInIssueUnits;
            else
                return null;
        }

        /// <summary>Returns cost inc vat depending on the account code XN 03Dec13 79631</summary>
        public double? GetAccountCostIncVat(short accountCode)
        {
            if (this.AccountCode_Credit == accountCode)
                return -this.CostIncVat;
            else if (this.AccountCode_Debit == accountCode)
                return this.CostIncVat;
            else
                return null;
        }

        /// <summary>Returns the cost ex vat depending on the account code XN 03Dec13 79631</summary>
        public double? GetAccountCostExVat(short accountCode)
        {
            if (this.AccountCode_Credit == accountCode)
                return -this.CostExVat;
            else if (this.AccountCode_Debit == accountCode)
                return this.CostExVat;
            else
                return null;
        }

        /// <summary>Returns the cost ex vat depending on the account code XN 03Dec13 79631</summary>
        public double? GetAccountVatCost(short accountCode)
        {
            if (this.AccountCode_Credit == accountCode)
                return -this.VatCost;
            else if (this.AccountCode_Debit == accountCode)
                return this.VatCost;
            else
                return null;
        }
    }

    /// <summary>Provides access to WFMLogCache table</summary>
    public class WFMLogCache : BaseTable2<WFMLogCacheRow, BaseColumnInfo>
    {
        public WFMLogCache() : base("WFMLogCache")  
        { 
            this.SelectCommandTimeout = 2 * 60; // 2mins
        }

        #region Load Methods
        /// <summary>
        /// Loads all rows from WFMLogCache filter by date range, site, rule codes, account code, and optional NSVCode
        /// groups rules by RuleCode, and NSVCode, AccountCodeType
        /// returns RuleCode, NSVCode, SUM(Quantity), and SUM(Cost), and account codes
        /// (timeout for this sp is 2mins)
        /// </summary>
        /// <param name="startDate">Start date time of range</param>
        /// <param name="endDate">End date time of range</param>
        /// <param name="siteIDs">Site IDs</param>
        /// <param name="ruleCodes">Rule codes</param>
        /// <param name="accountCode">account code to load</param>
        /// <param name="NSVCode">NSVCodes (or null for all drugs)</param>
        public void LoadByDatesSitesRulesAccountNSVCodes(DateTime startDate, DateTime endDate, IEnumerable<int> siteIDs, IEnumerable<short> ruleCodes, short accountCode, string NSVCode)
        {
            string[] NSVCodes = null;
            if (!string.IsNullOrEmpty(NSVCode))
                NSVCodes = new string[] { NSVCode };
            LoadByDatesSitesRulesAccountNSVCodes(startDate, endDate, siteIDs, ruleCodes, accountCode, NSVCodes);
        }
        public void LoadByDatesSitesRulesAccountNSVCodes(DateTime startDate, DateTime endDate, IEnumerable<int> siteIDs, IEnumerable<short> ruleCodes, short accountCode, IEnumerable<string> NSVCodes)
        {
            List<SqlParameter> parameters = new List<SqlParameter>();
            parameters.Add(new SqlParameter("StartDate",        startDate                       ));
            parameters.Add(new SqlParameter("EndDate",          endDate                         ));
            parameters.Add(new SqlParameter("SiteIDs",          siteIDs.ToCSVString(",")        ));
            parameters.Add(new SqlParameter("RuleCodes",        ruleCodes.ToCSVString(",")      ));
            parameters.Add(new SqlParameter("AccountCode",      accountCode                                 ));
            parameters.Add(new SqlParameter("NSVCodes",         (NSVCodes == null || !NSVCodes.Any()) ? (object)DBNull.Value : "'" + NSVCodes.ToCSVString("','") + "'" ));
            LoadBySP("pWFMLogCacheByDatesSitesRulesAccountNSVCodes", parameters);
        }

        /// <summary>
        /// Loads all rows from WFMLogCache filtered by date range, site, rule codes, account code, and optional NSVCode
        /// returns RuleCode, NSVCode, Drug description, SupCode, SupplierName, WardCode, WardName, SiteNumber, Quantity, Cost, and account codes
        /// No grouping is applied
        /// (timeout for this sp is 2mins)
        /// </summary>
        /// <param name="startDate">Start date time of range</param>
        /// <param name="endDate">End date time of range</param>
        /// <param name="siteIDs">Site ids</param>
        /// <param name="ruleCodes">Rule codes</param>
        /// <param name="accountCode">account code to load</param>
        /// <param name="NSVCode">NSVCode (or null for all drugs)</param>
        public void LoadByDatesSitesRulesAccountNSVCodeWithDescriptions(DateTime startDate, DateTime endDate, IEnumerable<int> siteIDs, IEnumerable<short> ruleCodes, short accountCode, string NSVCode)
        {
            List<SqlParameter> parameters = new List<SqlParameter>();
            parameters.Add(new SqlParameter("StartDate",    startDate                                                       ));
            parameters.Add(new SqlParameter("EndDate",      endDate                                                         ));
            parameters.Add(new SqlParameter("SiteIDs",      siteIDs.ToCSVString(",")                                        ));
            parameters.Add(new SqlParameter("RuleCodes",    ruleCodes.ToCSVString  (",")                                    ));
            parameters.Add(new SqlParameter("AccountCode",  accountCode                                                     ));
            parameters.Add(new SqlParameter("NSVCode",      string.IsNullOrEmpty(NSVCode) ? (object)DBNull.Value : NSVCode  ));
            LoadBySP("pWFMLogCacheByDatesSitesRulesAccountNSVCodeWithDescriptions", parameters);
        }
        
        /// <summary>
        /// Loads all rows from WFMLogCache filtered to time range, by sites, and account codes.
        /// groups by Site, order number, NSV Code, supcode, and month
        /// returns Site number, sup code, Supplier name, order number, NSVCOde, drug description, MAX(Log Date time), SUM(cost with correct credit or debit sign)
        /// (timeout for this sp is 2mins)
        /// </summary>
        /// <param name="fromDate">Specific to from date and time</param>
        /// <param name="toDate">Specific to date and time</param>
        /// <param name="siteIDs">Site Ids</param>
        /// <param name="accountCodes">account code to load</param>
        public void LoadByFromDateSitesAccountGroupMonthly(DateTime fromDate, DateTime toDate, IEnumerable<int> siteIDs, IEnumerable<short> accountCodes)
        {
            List<SqlParameter> parameters = new List<SqlParameter>();
            parameters.Add(new SqlParameter("fromDate",     fromDate                      ));
            parameters.Add(new SqlParameter("toDate",       toDate                        ));
            parameters.Add(new SqlParameter("SiteIDs",      siteIDs.ToCSVString(",")      ));
            parameters.Add(new SqlParameter("AccountCode",  accountCodes.ToCSVString(",") ));
            LoadBySP("pWFMLogCacheByFromDateSitesAccountGroupMonthly", parameters);
        }

        /// <summary>
        /// Loads all rows from WFMLogCache filter by date range, site, account code
        /// groups by Site, order number, NSV Code, supcode, wardcode, account codes, accountCodeType
        /// returns Site number, sup code, Supplier name, order number, NSVCOde, drug description, SUM(cost), account codes, accountCodeType
        /// (timeout for this sp is 2mins)
        /// 16Sep13 XN 73326 
        /// </summary>
        /// <param name="startDate">Start date time of range</param>
        /// <param name="endDate">End date time of range</param>
        /// <param name="siteIDs">Site ids</param>
        /// <param name="accountCodes">account codes to load</param>
        public void LoadByDatesSitesAccountCodes(DateTime startDate, DateTime endDate, IEnumerable<int> siteIDs, IEnumerable<short> accountCodes)
        {
            List<SqlParameter> parameters = new List<SqlParameter>();
            parameters.Add(new SqlParameter("StartDate",        startDate                       ));
            parameters.Add(new SqlParameter("EndDate",          endDate                         ));
            parameters.Add(new SqlParameter("SiteIDs",          siteIDs.ToCSVString(",")        ));
            parameters.Add(new SqlParameter("AccountCodes",     accountCodes.ToCSVString(",")   ));
            LoadBySP("pWFMLogCacheByDatesSitesAccountCodes", parameters);
        }
        #endregion

        #region Get info
        /// <summary>Get earliest date for data in WFMLogCahce</summary>
        public static DateTime? GetEarliestDate()
        {
            //return Database.ExecuteSQLScalar<DateTime?>("SELECT MIN(LogDateTime) FROM WFMLogCache");  20Aug14 XN table might be in a separate DB
            return FMDatabase.ExecuteSQLScalar<DateTime?>("SELECT MIN(LogDateTime) FROM WFMLogCache");
        }

        /// <summary>Get latest date for data in WFMLogCahce</summary>
        public static DateTime? GetLatestDate()
        {
            //return Database.ExecuteSQLScalar<DateTime?>("SELECT MAX(LogDateTime) FROM WFMLogCache");  20Aug14 XN table might be in a separate DB
            return FMDatabase.ExecuteSQLScalar<DateTime?>("SELECT MAX(LogDateTime) FROM WFMLogCache");
        }
        #endregion

        #region Helper Methods
        private class TotalLogCacheData
        {
            public string NSVCode;
            public int    LocationID_Site;
            public double StockLevelInIssueUnits;
            public double StockValueExVat;
            public double StockValueIncVat;
            public double StockValueVat;
        };

        /// <summary>
        /// Determines discrepancies (financial or stock level) between calculated closing balance (opening balance + all loaded WFMLogCache), and actual closing balance.
        /// Returns list of item with discrepancies 
        /// Will only return items where 
        ///     financial   discrepancy is greater than or equal 1 penny
        ///     stock value discrepancy is greater than or equal 0.001 issue units
        /// </summary>
        /// <param name="accountCode">Account code to caclulate to correct cost sign</param>
        /// <param name="openingLevels">data opening levels</param>
        /// <param name="closingLevels">data actual closing levels</param>
        /// <param name="siteIDsThatReclaimVat">List of site IDs that can reclaim vat</param>
        /// <returns>Items with discrepancies between opening and closing balances</returns>
        public List<WFMDiscrepancy> CalculateDiscrepancies(short accountCode, WFMDailyStockLevel openingLevels, WFMDailyStockLevel closingLevels, IEnumerable<int> siteIDsThatReclaimVat)
        {
            var openingBalances = (from o in openingLevels
                                  group o by new { o.NSVCode, o.LocationID_Site } into g
                                  select new TotalLogCacheData  {  NSVCode                = g.Key.NSVCode,
                                                                   LocationID_Site        = g.Key.LocationID_Site,
                                                                   StockLevelInIssueUnits = g.Sum(o => o.StockLevelInIssueUnits),
                                                                   StockValueExVat        = g.Sum(o => o.StockValueExVat),
                                                                   StockValueIncVat       = g.Sum(o => o.StockValueIncVat),
                                                                   StockValueVat          = g.Sum(o => o.StockValueVat)}).ToList();

            var closingBalances = (from o in closingLevels
                                  group o by new { o.NSVCode, o.LocationID_Site } into g
                                  select new TotalLogCacheData { NSVCode                = g.Key.NSVCode,
                                                                 LocationID_Site        = g.Key.LocationID_Site,
                                                                 StockLevelInIssueUnits = -g.Sum(o => o.StockLevelInIssueUnits),
                                                                 StockValueExVat        = -g.Sum(o => o.StockValueExVat),
                                                                 StockValueIncVat       = -g.Sum(o => o.StockValueIncVat),
                                                                 StockValueVat          = -g.Sum(o => o.StockValueVat)}).ToList();

            // Adjust opening, and closing, balance if vat account codes are present 20Feb14 XN 84499
            // Basicaly for opening balance Vat     = 0 
            //                              Inc Vat = Ex Vat
            //              closing balance Vat     = Closing balance Vat     - opening balance Vat (before zeroing) - vat for all log entries with T account
            //                              Inc Vat = Closing balance Inc Vat - opening balance Vat (before zeroing) - vat for all log entries with T account 
            if (siteIDsThatReclaimVat.Any())
            {
                var vatAccountSections = this.Where(l => l.AccountCodeType == "T").ToList();
                
                closingBalances.ForEach(d =>
                                        {
                                            var vatAccountSectionsForDrug = vatAccountSections.Where(o => o.NSVCode == d.NSVCode && siteIDsThatReclaimVat.Contains(o.LocationID_Site ?? 0)).ToList();
                                            if (vatAccountSectionsForDrug.Any())
                                            {
                                                // To get it to work had to -opening balance + vat quatity
                                                var vatTotal = openingBalances.Where(o => o.NSVCode == d.NSVCode && siteIDsThatReclaimVat.Contains(o.LocationID_Site)).Sum(o => o.StockValueVat) - 
                                                               vatAccountSectionsForDrug.Sum(o => o.GetAccountVatCost(accountCode) ?? 0);
                                                d.StockValueIncVat += vatTotal; 
                                                d.StockValueVat    += vatTotal;
                                            }
                                        });

                openingBalances.ForEach(d =>
                                        {
                                            if (vatAccountSections.Where(o => o.NSVCode == d.NSVCode && siteIDsThatReclaimVat.Contains(o.LocationID_Site ?? 0)).Any())
                                            {
                                                d.StockValueIncVat -= d.StockValueVat;
                                                d.StockValueVat     = 0;
                                            }
                                        });
            }

            var sections = from s in this
                                  group s by new { s.NSVCode, s.LocationID_Site } into g
                                  select new TotalLogCacheData { NSVCode                = g.Key.NSVCode,
                                                                 LocationID_Site        = g.Key.LocationID_Site ?? 0,
                                                                 StockLevelInIssueUnits = g.Sum(o => o.GetAccountQuantityInIssueUnits(accountCode)) ?? 0,
                                                                 StockValueExVat        = g.Sum(o => o.GetAccountCostExVat(accountCode))            ?? 0,
                                                                 StockValueIncVat       = g.Sum(o => o.GetAccountCostIncVat(accountCode))           ?? 0,
                                                                 StockValueVat          = g.Sum(o => o.GetAccountVatCost(accountCode))              ?? 0};

            return (from d in openingBalances.Concat(closingBalances).Concat(sections)
                    group d by d.NSVCode into g
                    let stockLevelInIssueUnits = g.Sum(d => d.StockLevelInIssueUnits )
                    let stockValueExVat        = g.Sum(d => d.StockValueExVat        )
                    let stockValueIncVat       = g.Sum(d => d.StockValueIncVat       )
                    let stockValueVat          = g.Sum(d => d.StockValueVat          )
                    where Math.Abs(stockLevelInIssueUnits).RoundQuantity() > 0.0 || Math.Abs(stockValueExVat).RoundCost() > 0.0 || Math.Abs(stockValueVat).RoundCost() > 0.0
                    orderby Math.Abs(stockLevelInIssueUnits) descending, Math.Abs(stockValueExVat) descending, Math.Abs(stockValueVat) descending
                    select new WFMDiscrepancy(){ NSVCode                = g.Key, 
                                                 StockLevelInIssueUnits = stockLevelInIssueUnits, 
                                                 StockValueExVat        = stockValueExVat,
                                                 StockValueIncVat       = stockValueIncVat,
                                                 StockValueVat          = stockValueVat } ).ToList();
        }
        #endregion

        /// <summary>Overriden to get connection string from FM db 20Aug14 XN</summary>
        protected override string ConnectionString
        {
            get { return FMDatabase.ConnectionString; }
        }
    }

    /// <summary>Provides helpful enumeration functions</summary>
    public static class WFMLogCacheEnumerationExtensions
    {
        /// <summary>Returns sum of all quantities in issue units (or null if all items are null)</summary>
        /// <param name="accountCode">Account code to caclulate to correct cost sign XN 03Dec13 79631</param>
        public static double? TotalQuantityInIssueUnits(this IEnumerable<WFMLogCacheRow> items, short accountCode)
        {
            return items.Any(i => i.QuantityInIssueUnits != null) ? (double?)items.Sum(i => i.GetAccountQuantityInIssueUnits(accountCode)) : null;
        }

        /// <summary>Returns sum of all cost excluding vat</summary>
        /// <param name="accountCode">Account code to caclulate to correct cost sign XN 03Dec13 79631</param>
        public static double TotalCostExVat(this IEnumerable<WFMLogCacheRow> items, short accountCode)
        {
            return items.Sum(i => i.GetAccountCostExVat(accountCode)) ?? 0;
        }

        /// <summary>Returns sum of all cost including vat</summary>
        /// <param name="accountCode">Account code to caclulate to correct cost sign XN 03Dec13 79631</param>
        public static double TotalCostIncVat(this IEnumerable<WFMLogCacheRow> items, short accountCode)
        {
            return items.Sum(i => i.GetAccountCostIncVat(accountCode)) ?? 0;
        }

        /// <summary>Returns sum of all vat costs</summary>
        /// <param name="accountCode">Account code to caclulate to correct cost sign XN 03Dec13 79631</param>
        public static double TotalVat(this IEnumerable<WFMLogCacheRow> items, short accountCode)
        {
            return items.Sum(i => i.GetAccountVatCost(accountCode)) ?? 0;
        }
    }
}
