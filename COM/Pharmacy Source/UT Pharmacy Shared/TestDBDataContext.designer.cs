#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UT_Pharmacy_Shared
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UHBServiceTestDB")]
	public partial class TestDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertwConfiguration(wConfiguration instance);
    partial void UpdatewConfiguration(wConfiguration instance);
    partial void DeletewConfiguration(wConfiguration instance);
    #endregion
		
		public TestDBDataContext() : 
				base(global::UT_Pharmacy_Shared.Properties.Settings.Default.UHBServiceTestDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TestDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TestDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<wConfiguration> wConfigurations
		{
			get
			{
				return this.GetTable<wConfiguration>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="sys.spResetDBForEnumViaDBLookupAttributeTests")]
		public int spResetDBForEnumViaDBLookupAttributeTests()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="sys.spClearDB")]
		public int spClearDB()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class wConfiguration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WConfigurationID;
		
		private int _SiteID;
		
		private string _Category;
		
		private string _Section;
		
		private string _Key;
		
		private string _Value;
		
		private int @__RowVersion;
		
		private System.Guid @__RowGUID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWConfigurationIDChanging(int value);
    partial void OnWConfigurationIDChanged();
    partial void OnSiteIDChanging(int value);
    partial void OnSiteIDChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnSectionChanging(string value);
    partial void OnSectionChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void On_RowVersionChanging(int value);
    partial void On_RowVersionChanged();
    partial void On_RowGUIDChanging(System.Guid value);
    partial void On_RowGUIDChanged();
    #endregion
		
		public wConfiguration()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WConfigurationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WConfigurationID
		{
			get
			{
				return this._WConfigurationID;
			}
			set
			{
				if ((this._WConfigurationID != value))
				{
					this.OnWConfigurationIDChanging(value);
					this.SendPropertyChanging();
					this._WConfigurationID = value;
					this.SendPropertyChanged("WConfigurationID");
					this.OnWConfigurationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteID", DbType="Int NOT NULL")]
		public int SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Section", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Section
		{
			get
			{
				return this._Section;
			}
			set
			{
				if ((this._Section != value))
				{
					this.OnSectionChanging(value);
					this.SendPropertyChanging();
					this._Section = value;
					this.SendPropertyChanged("Section");
					this.OnSectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(1024)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_RowVersion]", Storage="__RowVersion", DbType="Int NOT NULL")]
		public int _RowVersion
		{
			get
			{
				return this.@__RowVersion;
			}
			set
			{
				if ((this.@__RowVersion != value))
				{
					this.On_RowVersionChanging(value);
					this.SendPropertyChanging();
					this.@__RowVersion = value;
					this.SendPropertyChanged("_RowVersion");
					this.On_RowVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_RowGUID]", Storage="__RowGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid _RowGUID
		{
			get
			{
				return this.@__RowGUID;
			}
			set
			{
				if ((this.@__RowGUID != value))
				{
					this.On_RowGUIDChanging(value);
					this.SendPropertyChanging();
					this.@__RowGUID = value;
					this.SendPropertyChanged("_RowGUID");
					this.On_RowGUIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
