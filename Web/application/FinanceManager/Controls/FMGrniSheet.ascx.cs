//===========================================================================
//
//						        FMGrniSheet.ascx.cs
//
//  Control used to create an GRNI Report.
//        
//  The control displays header information, and the GRNI table.
//
//  The sheet displays only items that have been received (or returned), 
//  and not completely invoiced (or credited). 
//
//  Done by getting all log entries for account codes 210, and 220 (defined by setting FinanceManager.GrniSheet.AccountCode) 
//  Only displayed in report if total amount is >0 pence. 
//
//  Data will be grouped into months 0-3, 3-6, 6-9, and over 9 months 
//  (defined by settings FinanceManager.GrniSheet.MonthlyGrouping and FinanceManager.GrniSheet.MonthRange).
//
//  Data on the report will be grouped by site, supplier, and then by NSVCode and Order number, 
//  with a total for each site supplier, and grand total at end.
//
//  Sheets are generated by calling the Create method.
//  
//  The following html attributes are stored on the controls main panel
//      SheetID   - unique id of the sheet passed in to Create
//      Settings  - JSON serialised string of the settings passed into Create
//
//  Each value row (not site\supplier row) in the balance sheet has following attributes
//          rowType     - Set to value
//          SupCode     - Supplier code for drug
//          siteNumber  - Site number for drug
//          OrderNumber - Order number for drug
//          NSVCode     - NSV Code for drug
//
//  Double clicking on a row will bring up the log viewer this is done as follows
//      grniRow_OnDblClick                  - called when user double clicks on a row
//           SaveLogViewerSearchCriteria    - Web server method on ICW_FinanceManager.aspx called by client (save log viewer data to SessionAttribute table)
//           DisplayLogRows.aspx            - called by client to display the log rows
//
//  Usage:
//  To create a sheet
//  WFMGrniSettings settings = new WFMGrniSettings();
//  settings.upToDate    = DateTime.Now.AddDay(-1);    
//  settings.siteNumbers = new int[]{ 503, 504, 505, 506 };
//  accountStockSheet.Create(settings);
//
//	Modification History:
//	30May13 XN  Written (27252) 
//  07Jan14 XN  Rename Report headers 81136
//              Right justify value columns 81139
//  17Jan14 XN  Fixed header removed (a negative value indicates over invoicing) text 84561
//  27Oct14 XN  Order by Last Received column, then NSV Code, then order number (84538)
//===========================================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.UI;
using System.Web.UI.WebControls;
using ascribe.pharmacy.financemanagerlayer;
using ascribe.pharmacy.shared;
using ascribe.pharmacy.pharmacydatalayer;

public partial class application_FinanceManager_controls_FMGrniSheet : System.Web.UI.UserControl
{
    #region Constants
    // Column widths for grid
    private const int ColumnWidth_Site        = 30;
    private const int ColumnWidth_OrderNum    = 40;
    private const int ColumnWidth_Description = 375;
    private const int ColumnWidth_LastReceived= 65;
    private const int ColumnWidth_Cost        = 65;
    #endregion

    #region Member Variables
    /// <summary>Sheet setting</summary>
    protected WFMGrniSettings settings;

    /// <summary>Month range from setting FinanceManager.GrniSheet.MonthRange</summary>
    protected int monthRange;

    /// <summary>Month range from setting FinanceManager.GrniSheet.MonthGrouping</summary>
    protected int monthGrouping;

    /// <summary>Month columns monthRange / monthGrouping</summary>
    protected int monthColumnCount;
    #endregion

    /// <summary>Creates a GRNI Report using  the data from WFMLogCahce.</summary>
    public void Create(WFMGrniSettings settings)
    {
        this.settings        = settings;
        this.monthRange      = WFMSettings.GrniSheet.MonthRange;
        this.monthGrouping   = WFMSettings.GrniSheet.MonthlyGrouping;
        this.monthColumnCount= monthRange / monthGrouping;

        // Set sheet attributes
        this.pnGRNIPanel.Attributes.Add("SheetID",  settings.sheetID.ToString());
        this.pnGRNIPanel.Attributes.Add("Settings", Newtonsoft.Json.JsonConvert.SerializeObject(settings));

        // Get trust name
        ascribe.pharmacy.icwdatalayer.Location location = new ascribe.pharmacy.icwdatalayer.Location();
        location.LoadByLocationType("Trust");
        lbHospitalNam.Text = location.Any() ? location.First().Description : string.Empty;

        // Set header info
        lbDateCreated.Text         = DateTime.Now.ToPharmacyDateString();
        lbSites.Text               = "Site No: " + settings.siteNumbers.Select(s => s.ToString("000")).ToCSVString(" ");
        lbUpToDate.Text            = "Up to " + settings.upToDate.ToPharmacyDateString();
        divRebuildWarning.Visible  = WFMSettings.General.RebuildLogs;

        // Build table
        CreateHeader();
        CreateTable();
    }

    /// <summary>
    /// Returns the suggested colour mapping for the sheet (used when doing a print out)
    /// Maps web colours from the screen to HEdit colours
    /// </summary>
    public static IEnumerable<FinanceManagerReport.ColourMapInfo> GetColourMapping()
    {
        // Colour table index values can be found in FinanceManagerReport.ConvertToHEditColorIndex        
        List<FinanceManagerReport.ColourMapInfo> colorMap = new List<FinanceManagerReport.ColourMapInfo>();
        colorMap.Add(new FinanceManagerReport.ColourMapInfo(){ webColor=System.Drawing.Color.FromArgb(65,  127, 143), colorTableIndex=9  /*D. Grey*/,  shadingPercentage=100}); // Font colour
        colorMap.Add(new FinanceManagerReport.ColourMapInfo(){ webColor=System.Drawing.Color.FromArgb(86,   86,  82), colorTableIndex=14 /* Teal  */,  shadingPercentage=100}); // Font colour
        colorMap.Add(new FinanceManagerReport.ColourMapInfo(){ webColor=System.Drawing.Color.FromArgb(234, 234, 234), colorTableIndex=15 /* Silver*/,  shadingPercentage=35 }); // Light grey background (supplier volumns)
        colorMap.Add(new FinanceManagerReport.ColourMapInfo(){ webColor=System.Drawing.Color.FromArgb(220, 230, 251), colorTableIndex=9  /* Teal  */,  shadingPercentage=20 }); // header background
        colorMap.Add(new FinanceManagerReport.ColourMapInfo(){ webColor=System.Drawing.Color.FromArgb( 77, 158,  31), colorTableIndex=10 /* Green */,  shadingPercentage=100}); // border
        colorMap.Add(new FinanceManagerReport.ColourMapInfo(){ webColor=System.Drawing.Color.FromArgb(  0,   0,   0), colorTableIndex=0  /* Black */,  shadingPercentage=100}); // final row background
        return colorMap;
    }

    #region Private Methods
    /// <summary>Setup the two header rows for the table</summary>
    private void CreateHeader()
    {
        TableRow row;
        int month;

        // Dummy row for so easier to position columns
        row = new TableRow();
        table.Rows.Add(row);
        row.CssClass = "fm-grni-table-header0";
        row.Attributes.Add("headerRow", "1");
        AddCell(ColumnWidth_Site,            1, string.Empty,   "", null);
        AddCell(ColumnWidth_Description,     1, string.Empty,   "", null);
        AddCell(ColumnWidth_OrderNum,        1, string.Empty,   "", null);
        AddCell(ColumnWidth_LastReceived,    1, string.Empty,   "", null);
        AddCell(ColumnWidth_Cost * (monthColumnCount + 2), monthColumnCount + 2, string.Empty,   "", null);
        double totalPixel = table.Rows[0].Cells.Cast<TableCell>().Sum(c => c.Width.Value);
        pnGRNIPanel.Width = new Unit(totalPixel.ToString() + "px");

        // Site or supplier
        row = new TableRow();
        table.Rows.Add(row);
        row.Attributes.Add("headerRow", "1");
        AddCell(ColumnWidth_Site,        1, "Site #",   "fm-grni-table-header1", null);
        AddCell(ColumnWidth_Description, 2, "Supplier", "fm-grni-table-header1", null);
        AddCell(null, monthColumnCount + 3, "&nbsp;", "fm-grni-table-header-emptycell", null);

        // Add header
        row = new TableRow();
        table.Rows.Add(row);
        row.Attributes.Add("headerRow", "1");
        AddCell(ColumnWidth_Site,        1, "&nbsp;",           "fm-grni-table-header-emptycell",null);
        AddCell(ColumnWidth_Description, 1, "Description",      "fm-grni-table-header2",         null);
        AddCell(ColumnWidth_OrderNum,    1, "Order #",          "fm-grni-table-header2",         null);
        AddCell(ColumnWidth_LastReceived,1, "Last Received",    "fm-grni-table-header2",         null);
        AddCell(ColumnWidth_Cost,        1, "Amount",           "fm-grni-table-header2",         "right");
        for (month = 0; month < monthRange; month += monthGrouping)
            AddCell(ColumnWidth_Cost, 1, string.Format("{0}-{1}&nbsp;&nbsp;&nbsp;&nbsp;<br />Months", month, month + monthGrouping),"fm-grni-table-header2", "right");
        AddCell(ColumnWidth_Cost, 1, string.Format("Over {0}&nbsp;<br />Months", month),"fm-grni-table-header2", "right");
    }

    /// <summary>Populates the table</summary>
    private void CreateTable()
    {
        DateTime startDate = settings.upToDate.AddMonths(-monthRange);
        List<double?> drugMonthPeriodCosts            = new List<double?>();
        List<double>  totalPerSiteSupMonthPeriodCosts = new List<double>();
        List<double>  totalMonthPeriodCosts           = new List<double>();
        int totalColumnCount= (monthRange / monthGrouping) + 2;
        TableRow row;
        string temp;
        DateTime beginDateRange, endDateRange;
        double? cost;
        DateTime openingBalanceDate = WFMSettings.GrniSheet.OpeningBalanceDate;
        double   openingBalanceValue= WFMSettings.GrniSheet.OpeningBalance;

        // Initialise total costs
        for (int c = 0; c < totalColumnCount; c++)
        {
            totalPerSiteSupMonthPeriodCosts.Add(0.0);
            totalMonthPeriodCosts.Add(0.0);
        }
        totalMonthPeriodCosts[0                   ] = openingBalanceValue;  // Set opening balance
        totalMonthPeriodCosts[totalColumnCount - 1] = openingBalanceValue;

        // Get sites
        Sites sites = new Sites();
        sites.LoadAll();

        // Get all log entries to display on sheet
        WFMLogCache logs = new WFMLogCache();
        logs.LoadByFromDateSitesAccountGroupMonthly(openingBalanceDate, settings.upToDate, settings.siteNumbers.Select(s => sites.FindSiteIDBySiteNumber(s) ?? 0), WFMSettings.GrniSheet.AccountCode);

        // Group by site, and supplier
        var siteSupplierQuery = from l in logs
                                group l by new { l.LocationID_Site, l.SupCode } into g
                                orderby g.Key.LocationID_Site, g.First().SupplierName
                                select g;

        // Add opening balance
        row = new TableRow();
        row.CssClass = "fm-grni-table-total";
        table.Rows.Add(row);

        AddCell(ColumnWidth_Site,     1, string.Empty, "", null);
        AddCell(ColumnWidth_Description + ColumnWidth_OrderNum, 2, "Opening balance", "fm-grni-table-blackcell", "right");
        AddCell(ColumnWidth_LastReceived, 1, openingBalanceDate.ToPharmacyDateString(), "fm-grni-table-blackcell", "center");
        AddCell(ColumnWidth_Cost, 1, openingBalanceValue.RoundCost().ToMoneyString(MoneyDisplayType.Show), "fm-grni-table-blackcell", "right");
        for (int c = 1; c < totalColumnCount - 1; c++)
            AddCell(ColumnWidth_Cost, 1, "&nbsp;", "fm-grni-table-blackcell", "right");
        AddCell(ColumnWidth_Cost, 1, openingBalanceValue.RoundCost().ToMoneyString(MoneyDisplayType.Show), "fm-grni-table-blackcell", "right");

        AddEmptyRow();

        foreach (var siteSupplier in siteSupplierQuery)
        {
            // Group by NSVCode, and order number
            // Also sum cost an check total is greater than 0 (done in db, but also needs to be done here)
            // if no cost > 0 then end
            //var drugQuery = (from d in siteSupplier
            //                 group d by new { OrderNumber = d.OrderNumber, NSVCode = d.NSVCode } into g
            //                 where Math.Abs(g.Sum(d => d.CostIncVat).RoundCost()) > 0.0
            //                 orderby g.Key.NSVCode, g.Key.OrderNumber
            //                 select g).ToList();                  84538 XN 27Oct14 Order by Last Received column, then NSV Code, then order number
            var drugQuery = (from d in siteSupplier
                             group d by new { OrderNumber = d.OrderNumber, NSVCode = d.NSVCode } into g
                             where Math.Abs(g.Sum(d => d.CostIncVat).RoundCost()) > 0.0
                             let LastRecievedDate = g.Max(d => d.LogDateTime).Value.Date
                             orderby LastRecievedDate, g.Key.NSVCode, g.Key.OrderNumber
                             select new { NSVCode           = g.Key.NSVCode, 
                                          OrderNumber       = g.Key.OrderNumber,
                                          LastRecievedDate  = LastRecievedDate,
                                          Lines             = g.AsEnumerable() }).ToList();
            if (!drugQuery.Any())
                continue;

            // Zero the site, and supplier totals (in last item add opening balance)
            totalPerSiteSupMonthPeriodCosts[0] = openingBalanceValue;  // Set opening balance
            for (int c = 1; c < totalColumnCount - 1; c++)
                totalPerSiteSupMonthPeriodCosts[c] = 0;
            totalPerSiteSupMonthPeriodCosts[totalColumnCount - 1] = openingBalanceValue;  // Set opening balance

            // Add supplier row
            row = new TableRow();
            row.CssClass = "fm-grni-table-sitesupplier";
            table.Rows.Add(row);

            int? siteNumber = sites.FindSiteNumberByID(siteSupplier.Key.LocationID_Site ?? 0);

            temp = (siteNumber == null) ? string.Empty : siteNumber.Value.ToString("000");
            AddCell(ColumnWidth_Site, 1, temp, "", "center");

            temp = siteSupplier.First().SupplierName + " - " + siteSupplier.Key.SupCode;
            AddCell(ColumnWidth_Description, 1, temp, "", null);

            // Now add each drug line
            bool normalRowShading = false;
            string previousNSVCode = string.Empty;
            foreach (var drug in drugQuery)
            {
                // swap colouring (if drug has changed)
                if (drug.NSVCode != previousNSVCode)
                {
                    previousNSVCode  = drug.NSVCode;
                    normalRowShading = !normalRowShading;
                }

                // Set row attributes
                row = new TableRow();
                row.CssClass = normalRowShading ? "fm-grni-table-even" : "fm-grni-table-odd";
                row.Attributes.Add("ondblclick", string.Format("grniRow_OnDblClick('{0}', this);", settings.sheetID));
                row.Attributes.Add("rowType",       "value");
                row.Attributes.Add("SupCode",       siteSupplier.Key.SupCode.ToString() );
                row.Attributes.Add("siteNumber",    siteNumber.ToString()               );
                row.Attributes.Add("OrderNumber",   drug.OrderNumber                    );
                row.Attributes.Add("NSVCode",       drug.NSVCode                        );
                table.Rows.Add(row);

                // Set Cell Site
                AddCell(ColumnWidth_OrderNum, 1, string.Empty, "", null);

                // Set Cell Drug
                temp = drug.NSVCode + " - " + drug.Lines.First().DrugDescription;
                AddCell(ColumnWidth_Description, 1, temp, "", null);

                // Set Cell Order Number
                AddCell(ColumnWidth_OrderNum, 1, drug.OrderNumber, "", "center");

                // Set Cell Last received
                temp = drug.LastRecievedDate.ToPharmacyDateString();
                AddCell(ColumnWidth_LastReceived, 1, temp, "", "center");

                // Calculate each monthly period cost (0-3months, 2-6months...)
                drugMonthPeriodCosts.Clear();
                for (beginDateRange = settings.upToDate; beginDateRange > startDate; beginDateRange = beginDateRange.AddMonths(-this.monthGrouping))
                {
                    endDateRange = beginDateRange.AddMonths(-this.monthGrouping);
                    cost = drug.Lines.Where(d => d.LogDateTime.Value <= beginDateRange && d.LogDateTime.Value > endDateRange).Sum(d => d.CostIncVat);
                    drugMonthPeriodCosts.Add(cost.RoundCost());
                }
                
                // Calculate total cost
                cost = drug.Lines.Where(d => d.LogDateTime.Value <= beginDateRange).Sum(d => d.CostIncVat);
                drugMonthPeriodCosts.Add(cost.RoundCost());

                // Set Cell Total Value
                cost = -drugMonthPeriodCosts.Sum().RoundCost();
                AddCell(ColumnWidth_Cost, 1, Math.Abs(cost.Value) > 0.0 ? cost.ToMoneyString(MoneyDisplayType.Show) : string.Empty, "", "right");
                totalPerSiteSupMonthPeriodCosts[0] += cost ?? 0.0;
                totalMonthPeriodCosts[0]           += cost ?? 0.0;

                // Set Cell monthly periods
                for (int c = 0; c < drugMonthPeriodCosts.Count; c++)
                {
                    cost = -drugMonthPeriodCosts[c].RoundCost();
                    AddCell(ColumnWidth_Cost, 1,  Math.Abs(cost.Value) > 0.0 ? cost.ToMoneyString(MoneyDisplayType.Show) : string.Empty, "", "right");

                    totalPerSiteSupMonthPeriodCosts[c + 1] += cost ?? 0.0;
                    totalMonthPeriodCosts[c + 1]           += cost ?? 0.0;
                }
            }

            // Spacer
            AddEmptyRow();

            // Add site and supplier total row
            row = new TableRow();
            row.CssClass = "fm-grni-table-site-supplier-total";
            table.Rows.Add(row);

            AddCell(ColumnWidth_Site,           1, string.Empty, string.Empty,             null     );
            AddCell(ColumnWidth_Description,    1, string.Empty, "fm-grni-table-greycell", null     );
            AddCell(ColumnWidth_OrderNum,       1, string.Empty, "fm-grni-table-greycell", null     );
            AddCell(ColumnWidth_LastReceived,   1, "Total GRNI", "fm-grni-table-greycell", "right"  );
            foreach (double totalCost in totalPerSiteSupMonthPeriodCosts)
            {
                string totalCostStr = Math.Abs(totalCost.RoundCost()) > 0.0 ? totalCost.RoundCost().ToMoneyString(MoneyDisplayType.Show) : string.Empty;
                AddCell(ColumnWidth_Cost, 1, totalCostStr, "fm-grni-table-greycell", "right");
            }

            AddEmptyRow();
        }

        // Add total row
        row = new TableRow();
        row.CssClass = "fm-grni-table-total";
        table.Rows.Add(row);

        AddCell(ColumnWidth_Site,     1, string.Empty, "", null);
        AddCell(ColumnWidth_Description + ColumnWidth_OrderNum + ColumnWidth_LastReceived, 3, "Total Goods Received/(Returned) Not Invoiced/(Credited)", "fm-grni-table-blackcell", "right");
        foreach (double totalCost in totalMonthPeriodCosts)
        {
            string totalCostStr = Math.Abs(totalCost.RoundCost()) > 0.0 ? totalCost.RoundCost().ToMoneyString(MoneyDisplayType.Show) : string.Empty;
            AddCell(ColumnWidth_Cost, 1, totalCostStr, "fm-grni-table-blackcell", "right");
        }
    }

    /// <summary>Creates and adds it to the current row</summary>
    /// <param name="widthInPixels">Cell width in pixels (null if not to set)</param>
    /// <param name="columnSpan">Column span width</param>
    /// <param name="text">Text to display</param>
    /// <param name="cssClass">Css class to set cell (null if not to set)</param>
    /// <param name="textAlign">Text alignment to set (null if not to set)</param>
    private TableCell AddCell(int? widthInPixels, int columnSpan, string text, string cssClass, string textAlign)
    {
        TableCell cell = new TableCell();
        cell.ColumnSpan = columnSpan;
        cell.Text       = text;
        table.Rows[table.Rows.Count - 1].Cells.Add(cell);

        if (widthInPixels != null)
            cell.Width = new Unit(widthInPixels.Value);
        if (!string.IsNullOrEmpty(cssClass))
            cell.CssClass = cssClass;
        if (!string.IsNullOrEmpty(textAlign))
            cell.Style.Add(HtmlTextWriterStyle.TextAlign, textAlign);

        return cell;
    }

    /// <summary>Adds empty row to table</summary>
    private void AddEmptyRow()
    {
        TableRow row = new TableRow();
        row.CssClass = "fm-grni-table-emptyrow";
        table.Rows.Add(row);

        TableCell cell = new TableCell();
        cell.ColumnSpan = 5 + monthColumnCount;
        row.Cells.Add(cell);
    }
    #endregion
}
