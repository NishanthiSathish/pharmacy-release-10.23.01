//===========================================================================
//
//						        FMAccountSheet.ascx.cs
//
//  Control used to create an Account Enquiry.
//        
//  The control displays header information, and the account table.
//
//  Gets all log entries for the selected account code and groups by site, 
//  supplier, and then by NSVCode and Order number,
//  with a total for each site supplier, and grand total at end.
//  Only displayed in report if total value inc VAT is >0 pence. 
//
//  Sheets are generated by calling the Create method.
//  
//  The following html attributes are stored on the controls main panel
//      SheetID   - unique id of the sheet passed in to Create
//      Settings  - JSON serialised string of the settings passed into Create
//
//  Each value row (not site\supplier row) in the balance sheet has following attributes
//          rowType     - Set to value
//          siteNumber  - Site number for drug
//          NSVCode     - NSV Code for drug
//
//  Double clicking on a row will bring up the log viewer this is done as follows
//      asRow_OnDblClick                    - called when user double clicks on a row
//           SaveLogViewerSearchCriteria    - Web server method on ICW_FinanceManager.aspx called by client (save log viewer data to SessionAttribute table)
//           DisplayLogRows.aspx            - called by client to display the log rows
//
//  Usage:
//  To create a sheet
//  WFMAccountSettings settings = new WFMAccountSettings();
//  settings.accountCode = 110;
//  settings.startDate   = DateTime.Now.AddDay(-50);    
//  settings.endDate     = DateTime.Now.AddDay(-1);    
//  settings.siteNumbers = new int[]{ 503, 504, 505, 506 };
//  accountStockSheet.Create(settings);
//
//	Modification History:
//	16Sept13 XN  Written (73326) 
//  02Dec13  XN  Added VAT account code handling 79631
//  07Jan14  XN  Rename Report headers 81136
//               Right justify value columns 81139
//  17Feb14  XN   Remove VAT accoutn codes (now posted as spearate row) so added AccountCodeType
//===========================================================================
using System;
using System.Linq;
using System.Web.UI;
using System.Web.UI.WebControls;
using ascribe.pharmacy.financemanagerlayer;
using ascribe.pharmacy.pharmacydatalayer;
using ascribe.pharmacy.shared;
using System.Collections.Generic;

public partial class application_FinanceManager_Controls_FMAccountSheet : System.Web.UI.UserControl
{
    #region Constants
    // Column widths for grid
    private const int ColumnWidth_Site          = 32;
    private const int ColumnWidth_Description   = 340;
    private const int ColumnWidth_OrderNum      = 55;
    private const int ColumnWidth_Qty           = 75;
    private const int ColumnWidth_ValueExVat    = 72;
    private const int ColumnWidth_ValueIncVat   = 72;
    private const int ColumnWidth_ValueVat      = 72;
    #endregion

    #region Member Variables
    /// <summary>All account codes</summary>
    protected WFMAccountCode accountCodes = new WFMAccountCode();

    /// <summary>Sheet setting</summary>
    protected WFMAccountSheetSettings settings;
    #endregion

    /// <summary>Creates a balance sheet using  the data from WFMLogCahce.</summary>
    public void Create(WFMAccountSheetSettings settings)
    {
        this.settings = settings;

        // Set sheet attributes
        this.pnAccountPanel.Attributes.Add("SheetID",  settings.sheetID.ToString());
        this.pnAccountPanel.Attributes.Add("Settings", Newtonsoft.Json.JsonConvert.SerializeObject(settings));

        // Get stock account heading
        accountCodes.LoadAll();
        WFMAccountCodeRow selectedAccount = accountCodes.FindByCode(settings.accountCode);
        lbHeading.Text = string.Format("{0} ({1})", selectedAccount.Description, selectedAccount.Code);

        // Get trust name
        ascribe.pharmacy.icwdatalayer.Location location = new ascribe.pharmacy.icwdatalayer.Location();
        location.LoadByLocationType("Trust");
        lbHospitalNam.Text = location.Any() ? location.First().Description : string.Empty;

        // Set header info
        lbDateCreated.Text       = DateTime.Now.ToPharmacyDateString();
        lbSites.Text             = "Site No: " + settings.siteNumbers.Select(s => s.ToString("000")).ToCSVString(" ");
        lbDatePeriod.Text        = string.Format("Period: {0} - {1}", settings.startDate.ToPharmacyDateString(), settings.endDate.ToPharmacyDateString());
        divRebuildWarning.Visible= WFMSettings.General.RebuildLogs;

        // Create table
        CreateHeaderRow();
        CreateTable(settings);
    }

    /// <summary>Returns the suggested colour mapping for the sheet (used when doing a print out)</summary>
    public static IEnumerable<FinanceManagerReport.ColourMapInfo> GetColourMapping()
    {
        // Colour table index values can be found in FinanceManagerReport.ConvertToHEditColorIndex        
        List<FinanceManagerReport.ColourMapInfo> colorMap = new List<FinanceManagerReport.ColourMapInfo>();
        colorMap.Add(new FinanceManagerReport.ColourMapInfo(){ webColor=System.Drawing.Color.FromArgb(65,  127, 143), colorTableIndex=9  /* Teal  */,  shadingPercentage=100}); // Font colour
        colorMap.Add(new FinanceManagerReport.ColourMapInfo(){ webColor=System.Drawing.Color.FromArgb(233, 233, 221), colorTableIndex=13 /* L Grey*/,  shadingPercentage=20 }); // WOrderlog Main Header
        colorMap.Add(new FinanceManagerReport.ColourMapInfo(){ webColor=System.Drawing.Color.FromArgb(239, 239, 231), colorTableIndex=13 /* L Grey*/,  shadingPercentage=10 }); // WOrderlog Sub Header
        colorMap.Add(new FinanceManagerReport.ColourMapInfo(){ webColor=System.Drawing.Color.FromArgb(243, 235, 242), colorTableIndex=4  /* Magenta*/, shadingPercentage=10 }); // WTranslog Main Header
        colorMap.Add(new FinanceManagerReport.ColourMapInfo(){ webColor=System.Drawing.Color.FromArgb(246, 241, 245), colorTableIndex=15 /* L Grey*/,  shadingPercentage=20 }); // WTranslog Sub Header
        colorMap.Add(new FinanceManagerReport.ColourMapInfo(){ webColor=System.Drawing.Color.FromArgb(255, 215, 180), colorTableIndex=12 /* D Red */,  shadingPercentage=20 }); // Calc Closing Stock
        colorMap.Add(new FinanceManagerReport.ColourMapInfo(){ webColor=System.Drawing.Color.FromArgb(198,   0,   1), colorTableIndex=5  /* D Red */,  shadingPercentage=100}); // Calc Closing Stock
        return colorMap;
    }

    #region Private Methods
    /// <summary>Setup the two header rows for the table</summary>
    private void CreateHeaderRow()
    {
        TableRow  row  = null;
        string VAT      = PharmacyCultureInfo.SalesTaxName;
        string VATSpacer= "&nbsp;&nbsp;&nbsp;&nbsp;";

        // Dummy row for so easier to position columns
        row = new TableRow();
        table.Rows.Add(row);
        row.CssClass = "fm-as-table-header0";
        row.Attributes.Add("headerRow", "1");
        AddCell(ColumnWidth_Site,            1, string.Empty,   "", null);
        AddCell(ColumnWidth_Description,     1, string.Empty,   "", null);
        AddCell(ColumnWidth_OrderNum,        1, string.Empty,   "", null);
        AddCell(ColumnWidth_Qty,             1, string.Empty,   "", null);
        AddCell(ColumnWidth_ValueIncVat,     1, string.Empty,   "", null);
        AddCell(ColumnWidth_ValueExVat,      1, string.Empty,   "", null);
        AddCell(ColumnWidth_ValueVat,        1, string.Empty,   "", null);
        AddCell(ColumnWidth_ValueIncVat,     1, string.Empty,   "", null);
        AddCell(ColumnWidth_ValueExVat,      1, string.Empty,   "", null);
        AddCell(ColumnWidth_ValueVat,        1, string.Empty,   "", null);

        // Site or supplier
        row = new TableRow();
        table.Rows.Add(row);
        row.Attributes.Add("headerRow", "1");
        AddCell(ColumnWidth_Site,        1, "Site #",        "fm-as-table-header1",                     null);
        AddCell(ColumnWidth_Description, 1, "Supplier\\Ward","fm-as-table-header1",                     null);
        AddCell(null,                    2, "&nbsp;",        "fm-as-table-header1 fm-as-green-border",  null);
        AddCell(null,                    3, "Debit",         "fm-as-table-header2 fm-as-green-border",  null);
        AddCell(null,                    3, "Credit",        "fm-as-table-header2 fm-as-green-border",  null);

        // Add header
        row = new TableRow();
        table.Rows.Add(row);
        row.Attributes.Add("headerRow", "1");
        AddCell(null,        1,             string.Empty,                                   "fm-as-table-header2",                   null);
        AddCell(ColumnWidth_Description, 1, "Description",                                  "fm-as-table-header2",                   null);
        AddCell(ColumnWidth_OrderNum,    1, "Order #",                                      "fm-as-table-header2",                   null);
        AddCell(ColumnWidth_Qty,         1, "Quantity<br />(issue units)",                  "fm-as-table-header2 fm-as-green-border",null);
        AddCell(ColumnWidth_ValueIncVat, 1, "Value Inc.<br />" + VAT + VATSpacer,         "fm-as-table-header2",                   "right");
        AddCell(ColumnWidth_ValueExVat,  1, "Value Ex.<br />" + VAT + VATSpacer,          "fm-as-table-header2",                   "right");  // Debit
        AddCell(ColumnWidth_ValueVat,    1, VAT,                                          "fm-as-table-header2 fm-as-green-border","right");
        AddCell(ColumnWidth_ValueIncVat, 1, "Value Inc.<br />" + VAT + VATSpacer,         "fm-as-table-header2",                   "right");
        AddCell(ColumnWidth_ValueExVat,  1, "Value Ex.<br />" + VAT + VATSpacer,          "fm-as-table-header2",                   "right");  // Credit
        AddCell(ColumnWidth_ValueVat,    1, VAT,                                          "fm-as-table-header2 fm-as-green-border","right");
    }

    /// <summary>Populates the table</summary>
    private void CreateTable(WFMAccountSheetSettings settings)
    {
        double totalQtyPerSiteSup = 0.0, totalQty = 0.0;
        double[,] totalPerSiteSup = new double[2,3];
        double[,] total           = new double[2,3];
        TableRow row;
        string temp;
        double? tempValue;

        // Zero total
        Array.Clear(total, 0, 6);
        totalQty = 0.0;

        // Get sites
        Sites sites = new Sites();
        sites.LoadAll();
        var siteIDs   = settings.siteNumbers.Select(s => sites.FindSiteIDBySiteNumber(s) ?? 0).ToList();

        // Get all log entries to display on sheet
        var allAccountCodes = accountCodes.FindAllSubCodes(settings.accountCode, true).Select(c => c.Code).ToList();        
        WFMLogCache logs = new WFMLogCache();
        logs.LoadByDatesSitesAccountCodes(settings.startDate, settings.endDate, siteIDs, allAccountCodes);

        // Group by site, and supplier
        var siteSupplierQuery = from l in logs
                                group l by new { l.LocationID_Site, l.SupCode, l.WardCode } into g
                                orderby g.Key.LocationID_Site, g.First().SupplierName
                                select g;
        foreach (var siteSupplier in siteSupplierQuery)
        {
            // Group by NSVCode, and order number
            // Also sum cost an check total is greater than 0 (done in db, but also needs to be done here)
            // if no cost > 0 then end
            var drugQuery = (from d in siteSupplier
                             group d by new { OrderNumber = d.OrderNumber, 
                                              NSVCode     = d.NSVCode } 
                                    into g
                             orderby g.Key.NSVCode, g.Key.OrderNumber
                             select g).ToList();
            if (!drugQuery.Any())
                continue;

            // Zero the site, and supplier totals
            Array.Clear(totalPerSiteSup, 0, 6);
            totalQtyPerSiteSup = 0.0;

            // Add supplier row
            row = new TableRow();
            row.CssClass = "fm-as-table-sitesupplier";
            table.Rows.Add(row);

            int? siteNumber = sites.FindSiteNumberByID(siteSupplier.Key.LocationID_Site ?? 0);

            temp = (siteNumber == null) ? string.Empty : siteNumber.Value.ToString("000");
            AddCell(ColumnWidth_Site, 1, temp, null, "center");

            temp = string.IsNullOrEmpty(siteSupplier.Key.SupCode) ? "Ward - " + siteSupplier.Key.WardCode : siteSupplier.First().SupplierName + " - " + siteSupplier.Key.SupCode;
            AddCell(null, 3, temp, "fm-as-green-border", null);

            AddCell(null, 3, string.Empty, "fm-as-table-whitecell fm-as-green-border", null);
            AddCell(null, 3, string.Empty, "fm-as-table-whitecell fm-as-green-border", null);

            // Now add each drug line
            bool normalRowShading = false;
            string previousNSVCode = string.Empty;
            foreach (var drug in drugQuery)
            {
                // swap colouring (if drug has changed)
                if (drug.Key.NSVCode != previousNSVCode)
                {
                    previousNSVCode  = drug.Key.NSVCode;
                    normalRowShading = !normalRowShading;
                }

                // Set row attributes
                row = new TableRow();
                row.CssClass = normalRowShading ? "fm-as-table-even" : "fm-as-table-odd";
                row.Attributes.Add("ondblclick", string.Format("asRow_OnDblClick('{0}', this);", settings.sheetID));
                row.Attributes.Add("rowType",       "value");
                row.Attributes.Add("siteNumber",    siteNumber.ToString()                   );
                row.Attributes.Add("NSVCode",       drug.Key.NSVCode                        );
                table.Rows.Add(row);

                // Set Cell Drug (start at site column, and description column
                temp = drug.Key.NSVCode + " - " + drug.First().DrugDescription;
                AddCell(ColumnWidth_Site + ColumnWidth_Description, 2, temp, string.Empty, null);

                // Set Cell Order Number
                AddCell(ColumnWidth_OrderNum, 1, drug.Key.OrderNumber, string.Empty, "center");

                // Set Cell Quantity
                tempValue = drug.Sum(d => d.QuantityInIssueUnits);
                temp = tempValue == null ? string.Empty : tempValue.Value.RoundQuantity().ToString("0.###");
                totalQtyPerSiteSup += tempValue ?? 0.0;
                AddCell(ColumnWidth_Qty, 1, temp, "fm-as-green-border", "right");

                // Debit Inc Vat
                var debitCacheData = drug.Where(d => allAccountCodes.Contains(d.AccountCode_Debit ?? 0)).ToList();
                if (debitCacheData.Any())
                {
                    tempValue = debitCacheData.Sum(d => d.CostIncVat);
                    totalPerSiteSup[0,1] += tempValue.Value;
                    AddCell(ColumnWidth_ValueIncVat, 1, tempValue.ToMoneyString(MoneyDisplayType.Show), null, "right");
                }
                else
                    AddCell(ColumnWidth_ValueIncVat, 1, string.Empty, null, null);

                // Debit Ex Vat
                if (debitCacheData.Any())
                {
                    tempValue = debitCacheData.Sum(d => d.CostExVat);
                    totalPerSiteSup[0,0] += tempValue.Value;
                    AddCell(ColumnWidth_ValueExVat, 1, tempValue.ToMoneyString(MoneyDisplayType.Show), null, "right");
                }
                else
                    AddCell(ColumnWidth_ValueExVat, 1, string.Empty, null, null);

                // Debit Vat
                if (debitCacheData.Any())
                {
                    tempValue = debitCacheData.Sum(d => d.VatCost);
                    totalPerSiteSup[0,2] += tempValue.Value;
                    AddCell(ColumnWidth_ValueVat, 1, tempValue.ToMoneyString(MoneyDisplayType.Show), "fm-as-green-border", "right");
                }
                else
                    AddCell(ColumnWidth_ValueVat, 1, string.Empty, "fm-as-green-border", null);


                // Credit Inc Vat
                var creditCacheData = drug.Where(d => allAccountCodes.Contains(d.AccountCode_Credit ?? 0)).ToList();
                if (creditCacheData.Any())
                {
                    tempValue = creditCacheData.Sum(d => d.CostIncVat);
                    totalPerSiteSup[1,1] += tempValue.Value;
                    AddCell(ColumnWidth_ValueIncVat, 1, tempValue.ToMoneyString(MoneyDisplayType.Show), null, "right");
                }
                else
                    AddCell(ColumnWidth_ValueIncVat, 1, string.Empty, null, null);

                // Credit Ex Vat
                if (creditCacheData.Any())
                {
                    tempValue = creditCacheData.Sum(d => d.CostExVat);
                    totalPerSiteSup[1,0] += tempValue.Value;
                    AddCell(ColumnWidth_ValueExVat, 1, tempValue.ToMoneyString(MoneyDisplayType.Show), null, "right");
                }
                else
                    AddCell(ColumnWidth_ValueExVat, 1, string.Empty, null, null);

                // Credit Vat
                if (creditCacheData.Any())
                {
                    tempValue = creditCacheData.Sum(d => d.VatCost);
                    totalPerSiteSup[1,2] += tempValue.Value;
                    AddCell(ColumnWidth_ValueVat, 1, tempValue.ToMoneyString(MoneyDisplayType.Show), "fm-as-green-border", "right");
                }
                else
                    AddCell(ColumnWidth_ValueVat, 1, string.Empty, "fm-as-green-border", null);
            }

            // Spacer
            AddEmptyRow();

            // Add site and supplier total row
            row = new TableRow();
            row.CssClass = "fm-as-table-site-supplier-total";
            table.Rows.Add(row);

            AddCell(ColumnWidth_Site,           1, string.Empty,                                                null,                                       null     );
            AddCell(ColumnWidth_Description,    1, string.Empty,                                                null,                                       null     );
            AddCell(ColumnWidth_OrderNum,       1, "Total",                                                     "fm-as-table-greycell",                     "right"  );
            AddCell(ColumnWidth_Qty,            1, totalQtyPerSiteSup.RoundQuantity().ToString("0.###"),        "fm-as-table-greycell fm-as-green-border",  "right"  );
            AddCell(ColumnWidth_ValueIncVat,    1, totalPerSiteSup[0,1].ToMoneyString(MoneyDisplayType.Show),   "fm-as-table-greycell",                     "right"  );
            AddCell(ColumnWidth_ValueExVat,     1, totalPerSiteSup[0,0].ToMoneyString(MoneyDisplayType.Show),   "fm-as-table-greycell",                     "right"  );
            AddCell(ColumnWidth_ValueVat,       1, totalPerSiteSup[0,2].ToMoneyString(MoneyDisplayType.Show),   "fm-as-table-greycell fm-as-green-border",  "right"  );
            AddCell(ColumnWidth_ValueIncVat,    1, totalPerSiteSup[1,1].ToMoneyString(MoneyDisplayType.Show),   "fm-as-table-greycell",                     "right"  );
            AddCell(ColumnWidth_ValueExVat,     1, totalPerSiteSup[1,0].ToMoneyString(MoneyDisplayType.Show),   "fm-as-table-greycell",                     "right"  );
            AddCell(ColumnWidth_ValueVat,       1, totalPerSiteSup[1,2].ToMoneyString(MoneyDisplayType.Show),   "fm-as-table-greycell fm-as-green-border",  "right"  );

            totalQty += totalQtyPerSiteSup;
            for(int c = 0; c < 3; c++)
            {
                total[0,c] += totalPerSiteSup[0,c];
                total[1,c] += totalPerSiteSup[1,c];
            }

            AddEmptyRow();
        }

        // Add total row
        row = new TableRow();
        row.CssClass = "fm-as-table-total";
        table.Rows.Add(row);

        AddCell(ColumnWidth_Site,           1, string.Empty,                                    null,                                       null     );
        AddCell(ColumnWidth_Description,    1, string.Empty,                                    null,                                       null     );
        AddCell(ColumnWidth_OrderNum,       1, "Total",                                         "fm-as-table-blackcell",                    "right"  );
        AddCell(ColumnWidth_Qty,            1, totalQty.RoundQuantity().ToString("0.###"),      "fm-as-table-blackcell fm-as-green-border", "right"  );
        AddCell(ColumnWidth_ValueIncVat,    1, total[0,1].ToMoneyString(MoneyDisplayType.Show), "fm-as-table-blackcell",                    "right"  );
        AddCell(ColumnWidth_ValueExVat,     1, total[0,0].ToMoneyString(MoneyDisplayType.Show), "fm-as-table-blackcell",                    "right"  );
        AddCell(ColumnWidth_ValueVat,       1, total[0,2].ToMoneyString(MoneyDisplayType.Show), "fm-as-table-blackcell fm-as-green-border", "right"  );
        AddCell(ColumnWidth_ValueIncVat,    1, total[1,1].ToMoneyString(MoneyDisplayType.Show), "fm-as-table-blackcell",                    "right"  );
        AddCell(ColumnWidth_ValueExVat,     1, total[1,0].ToMoneyString(MoneyDisplayType.Show), "fm-as-table-blackcell",                    "right"  );
        AddCell(ColumnWidth_ValueVat,       1, total[1,2].ToMoneyString(MoneyDisplayType.Show), "fm-as-table-blackcell fm-as-green-border", "right"  );
    }


    /// <summary>Creates and adds it to the current row</summary>
    /// <param name="widthInPixels">Cell width in pixels (null if not to set)</param>
    /// <param name="columnSpan">Column span width</param>
    /// <param name="text">Text to display</param>
    /// <param name="cssClass">Css class to set cell (null if not to set)</param>
    /// <param name="textAlign">Text alignment to set (null if not to set)</param>
    private TableCell AddCell(int? widthInPixels, int columnSpan, string text, string cssClass, string textAlign)
    {
        TableCell cell = new TableCell();
        cell.ColumnSpan = columnSpan;
        cell.Text       = text;
        table.Rows[table.Rows.Count - 1].Cells.Add(cell);
        
        if (widthInPixels != null)
            cell.Width = new Unit(widthInPixels.Value);
        if (!string.IsNullOrEmpty(cssClass))
            cell.CssClass = cssClass;
        if (!string.IsNullOrEmpty(textAlign))
            cell.Style.Add(HtmlTextWriterStyle.TextAlign, textAlign);

        return cell;
    }

    /// <summary>Adds empty row to table</summary>
    private void AddEmptyRow()
    {
        TableCell cell;
        TableRow row = new TableRow();
        row.CssClass = "fm-as-table-emptyrow";
        table.Rows.Add(row);

        cell = new TableCell();
        cell.ColumnSpan = 4;
        cell.CssClass   = "fm-as-green-border";
        row.Cells.Add(cell);

        cell = new TableCell();
        cell.ColumnSpan = 3;
        cell.CssClass   = "fm-as-green-border";
        row.Cells.Add(cell);

        cell = new TableCell();
        cell.ColumnSpan = 3;
        cell.CssClass   = "fm-as-green-border";
        row.Cells.Add(cell);
    }
    #endregion
}